/**
 * \file   lightFieldCore.h
 * \author Clemens Brummer
 * \date   01.11.2012
 */

#ifndef LIGHT_FIELD_CORE_H
#define LIGHT_FIELD_CORE_H

#include "lfTypes.h"
#include "lfError.h"
#include "lightFieldDepthGeneratorParameter.h"
#include "lightFieldViewGeneratorParameter.h"

struct corePrivs;

/**
 * Light Field Core.
 * This class handles ... TODO
 * 
 * 
 */
class cLightFieldCore
{
public:
  cLightFieldCore();
  ~cLightFieldCore();


  /**
   * Loads a raw light field image from disc.
   * \param file_name Path of the image file
   * \return LF_NO_ERR on success and LF_ERR on failure
   */
  lfError loadRawImage(const char* file_name);
  /**
   * Loads an light field image taken with a white filter from disc.
   * \param file_name Path of the image file
   * \return LF_NO_ERR on success and LF_ERR on failure
   */
  lfError loadWhiteImage(const char* file_name, const char* proc_file_name = NULL);
  /**
   * Loads an processed light field image from disc.
   * \param file_name Path of the image file
   * \return LF_NO_ERR on success and LF_ERR on failure
   */
  lfError loadProcImage(const char* file_name);
  /**
   * Loads a calibration file from disc.
   * \param file_name  Path of the calibration file
   * \param type  identifier of the calibration file type
   * \return LF_NO_ERR on success and LF_ERR on failure
   * \sa lfCalibrationFileType_t
   */
  lfError loadCalibration(const char* file_name, lfCalibrationFileType_t type);
  /**
   * Shows a depth image generated by specified algorithm.
   * \param type depth generator identifier
   * \return LF_NO_ERR on success and LF_ERR on failure
   * \sa lfCalibrationFileType_t
   */
  lfError usePlaneDepthImage(double plane);
  lfError loadDepthImage(const char* file_name);
   
  lfError saveRenderedView(const char* file_name, lfViewGeneratorType_t type, double virtual_depth);
  lfError showRenderedView(lfViewGeneratorType_t type, double virtual_depth);  
  /**
   * Shows the input image with little circles to vizualize the micro lenses.
   * \return 0 on success and nonzero on failure
   */
  lfError showCalibImage();  
  /**
   * Saves the calibration image to disc.
   * \param file_name Path to store the image on disc. Format will be recognized automatically.
   * \return 0 on success and nonzero on failure
   */
  lfError saveCalibImage(const char* file_name);
  
  lfError saveLensImages(const char* folder_name, bool from_depth_image=false);
private:
  void* loadImage(const char* file_name);
  lfError saveImage(const char* file_name, void* img);
  void* createCalibImage();
  lfError createDepthImage(lfDepthGeneratorType_t type, lfDepthGeneratorParameter* params);
  lfError renderView(lfViewGeneratorType_t type);
  lfError filterImage(const char* file_name = NULL);
  lfError extractLensImages(void* img);
  lfError getLensImage(int lens_num, int lens_type, const void* calib_params, void* full_img, void* mask_img, void* lens_img);

  corePrivs* p; 
};
#endif // LIGHT_FIELD_CORE_H
